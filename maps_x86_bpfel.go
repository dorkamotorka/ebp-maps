// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadMaps returns the embedded CollectionSpec for maps.
func loadMaps() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MapsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load maps: %w", err)
	}

	return spec, err
}

// loadMapsObjects loads maps and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*mapsObjects
//	*mapsPrograms
//	*mapsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMapsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMaps()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// mapsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type mapsSpecs struct {
	mapsProgramSpecs
	mapsMapSpecs
}

// mapsSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type mapsProgramSpecs struct {
}

// mapsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type mapsMapSpecs struct {
	ArrayMap   *ebpf.MapSpec `ebpf:"array_map"`
	HashMap    *ebpf.MapSpec `ebpf:"hash_map"`
	LruHashMap *ebpf.MapSpec `ebpf:"lru_hash_map"`
	MapEvents  *ebpf.MapSpec `ebpf:"map_events"`
}

// mapsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMapsObjects or ebpf.CollectionSpec.LoadAndAssign.
type mapsObjects struct {
	mapsPrograms
	mapsMaps
}

func (o *mapsObjects) Close() error {
	return _MapsClose(
		&o.mapsPrograms,
		&o.mapsMaps,
	)
}

// mapsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMapsObjects or ebpf.CollectionSpec.LoadAndAssign.
type mapsMaps struct {
	ArrayMap   *ebpf.Map `ebpf:"array_map"`
	HashMap    *ebpf.Map `ebpf:"hash_map"`
	LruHashMap *ebpf.Map `ebpf:"lru_hash_map"`
	MapEvents  *ebpf.Map `ebpf:"map_events"`
}

func (m *mapsMaps) Close() error {
	return _MapsClose(
		m.ArrayMap,
		m.HashMap,
		m.LruHashMap,
		m.MapEvents,
	)
}

// mapsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMapsObjects or ebpf.CollectionSpec.LoadAndAssign.
type mapsPrograms struct {
}

func (p *mapsPrograms) Close() error {
	return _MapsClose()
}

func _MapsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed maps_x86_bpfel.o
var _MapsBytes []byte
